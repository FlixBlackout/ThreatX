version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: threatx-postgres
    environment:
      POSTGRES_DB: threatx_db
      POSTGRES_USER: threatx
      POSTGRES_PASSWORD: password
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/sql/schema.sql:/docker-entrypoint-initdb.d/01-schema.sql
      - ./database/sql/sample_data.sql:/docker-entrypoint-initdb.d/02-sample_data.sql
    ports:
      - "5432:5432"
    networks:
      - threatx-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U threatx -d threatx_db"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # AI Engine (Python Flask)
  ai-engine:
    build:
      context: ./ai-engine
      dockerfile: Dockerfile
    container_name: threatx-ai-engine
    environment:
      - FLASK_ENV=production
      - DATABASE_URL=postgresql://threatx:password@postgres:5432/threatx_db
      - API_HOST=0.0.0.0
      - API_PORT=5000
      - LOG_LEVEL=INFO
    volumes:
      - ./ai-engine/models:/app/models
      - ./ai-engine/logs:/app/logs
      - ./datasets:/app/datasets
    ports:
      - "5000:5000"
    networks:
      - threatx-network
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped

  # Dashboard (Java Spring Boot)
  dashboard:
    build:
      context: ./dashboard
      dockerfile: Dockerfile
    container_name: threatx-dashboard
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/threatx_db
      - SPRING_DATASOURCE_USERNAME=threatx
      - SPRING_DATASOURCE_PASSWORD=password
      - THREATX_AI_ENGINE_BASE_URL=http://ai-engine:5000
    volumes:
      - ./dashboard/logs:/app/logs
    ports:
      - "8080:8080"
    networks:
      - threatx-network
    depends_on:
      postgres:
        condition: service_healthy
      ai-engine:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 90s
    restart: unless-stopped

  # Redis (for caching and session management)
  redis:
    image: redis:7-alpine
    container_name: threatx-redis
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - threatx-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Nginx (Reverse Proxy)
  nginx:
    image: nginx:alpine
    container_name: threatx-nginx
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/ssl:/etc/nginx/ssl
    ports:
      - "80:80"
      - "443:443"
    networks:
      - threatx-network
    depends_on:
      - dashboard
      - ai-engine
    restart: unless-stopped

  # Elasticsearch (for log analysis and search)
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: threatx-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - threatx-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped

  # Kibana (for log visualization)
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: threatx-kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    networks:
      - threatx-network
    depends_on:
      elasticsearch:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5601/api/status"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped

  # Grafana (for metrics and monitoring)
  grafana:
    image: grafana/grafana:latest
    container_name: threatx-grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/provisioning:/etc/grafana/provisioning
    ports:
      - "3000:3000"
    networks:
      - threatx-network
    restart: unless-stopped

  # Prometheus (for metrics collection)
  prometheus:
    image: prom/prometheus:latest
    container_name: threatx-prometheus
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - threatx-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    restart: unless-stopped

# Networks
networks:
  threatx-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# Volumes
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  elasticsearch_data:
    driver: local
  grafana_data:
    driver: local
  prometheus_data:
    driver: local

# Development override (use with docker-compose -f docker-compose.yml -f docker-compose.dev.yml up)
# For development environment with hot reloading and debug features